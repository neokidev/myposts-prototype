---
const encoder = new TextEncoder();

export interface Props {
  title: string;
  body: string;
  tags: string[];
}

const { title, body, tags } = Astro.props;

const colors = [
  { class: "bg-blue-900 text-blue-200/80" },
  { class: "bg-red-900 text-red-200/80" },
  { class: "bg-green-900 text-green-200/80" },
  { class: "bg-yellow-900 text-yellow-200/80" },
  { class: "bg-indigo-900 text-indigo-200/80" },
  { class: "bg-purple-900 text-purple-200/80" },
  { class: "bg-pink-900 text-pink-200/80" },
];

const selectTagColor = (tag: string): { class: string } => {
  const encoded = encoder.encode(tag);
  const number = encoded.reduce((total, value) => total + value, 0);
  return colors[number % colors.length];
};
---

<article class="w-72 h-80">
  <a
    href="#"
    class="h-full block max-w-sm p-5 border rounded-lg bg-gray-800 border-gray-700 hover:bg-gray-700 overflow-hidden"
  >
    <h5 class="mb-2 text-xl font-extrabold tracking-tight text-white">
      {title}
    </h5>
    <div class="mb-2 flex flex-wrap">
      {
        tags.map((tag) => (
          <span
            class={`text-xs font-medium mr-0.5 mb-0.5 px-2 py-[0.0625rem] rounded-full flex items-center justify-center ${
              selectTagColor(tag).class
            }`}
          >
            {tag}
          </span>
        ))
      }
    </div>
    <p class="text-sm text-gray-400">
      {body}
    </p>
  </a>
</article>
